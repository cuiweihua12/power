<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">


    <!-- 加载本地资源文件 -->
    <context:property-placeholder  location="classpath:jdbc.properties"/>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定要使用的连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 所有mapper.xml文件位置 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
     </bean>


    <!--动态代理实现 不用写dao的实现 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 -->
        <property name="basePackage" value="com.mr.cwh.*.mapper" />
        <!-- 指定数据源 ,如果只有一个可以不写 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>


    <!-- 配置连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="minPoolSize" value="5" />
        <property name="maxPoolSize" value="30" />
        <property name="initialPoolSize" value="10" />
        <property name="acquireIncrement" value="5" />
        <property name="maxStatements" value="0"/>
        <property name="acquireRetryAttempts" value="30" />
        <property name="breakAfterAcquireFailure" value="true" />
        <property name="testConnectionOnCheckout" value="false"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 声明式事务处理 -->
    <aop:config>
        <aop:pointcut id="trPointcut" expression="execution(* com.mr.cwh.*.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="trPointcut"/>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*"   rollback-for="java.lang.Exception"/>
            <tx:method name="save*"  rollback-for="java.lang.Exception" />
            <tx:method name="del*" rollback-for="java.lang.Exception" />
            <tx:method name="rem*" rollback-for="java.lang.Exception" />
            <tx:method name="update*" rollback-for="java.lang.Exception" />
            <tx:method name="edit*" rollback-for="java.lang.Exception"/>
            <tx:method name="register*" rollback-for="java.lang.Exception"/>
            <tx:method name="batchRemove" rollback-for="java.lang.Exception"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 引入redis配置文件 -->
    <import resource="classpath:redis.xml"/>

    <!-- 引入shiro配置文件 -->
    <import resource="classpath:spring-shiro.xml" />

    <!-- 引入mail配置文件-->
    <import resource="classpath:mail.xml" />


</beans>
